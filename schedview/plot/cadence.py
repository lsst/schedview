import bokeh
import numpy as np
import pandas as pd
from astropy.time import Time

from schedview import band_column

from .colors import make_band_cmap


def create_cadence_plot(
    nightly_totals, start_dayobs_mjd, end_dayobs_mjd, targets=None, cmap=None, user_plot_kwargs={}
):
    """ "Create a cadence plot for a set of targets.

    Parameters
    ----------
    nightly_totals : `pandas.DataFrame`
        A DataFrame indexed by ``"targe_name"`` (`str`) and
        ``"day_obs_iso8601"``
        (`str` in YYYY-MM-DD format), filter names as column names (`float`),
        with total effective exposure times.
    start_dayobs_mjd : `float`
        The dayobs MJD of the first night in the plot.
    end_dayobs_mjd : `float`
        The dayobs MJD of the last night in the plot.
    targets : `list` (`str`), optional
        The list of targets for which to make plots. Defaults to the targets
        included in the ``nightly_totals`` DataFrame.
    cmap : `bokeh.core.property.vectorization.Field` or `None`(optional)
        The ``bokeh`` color map as generated by
        ``bokeh.transform.factor_cmap``. Defaults to return of
        `schedview.plot.make_plot_band_cmap()`.
    user_plot_kwargs : `dict`
        Extra arguments to pass to `bokeh.plotting.figure.vbar_stack`.
        Defaults to ``{}``.

    Returns
    -------
    full_cadence_figure : `bokeh.models.layouts.LayoutDOM`
        The bokeh plot with cadence plots for all targets.
    """
    if cmap is None:
        cmap = make_band_cmap(band_column(nightly_totals))

    if targets is None:
        targets = tuple(nightly_totals.index.get_level_values("target_name").unique())

    date_factors = [Time(mjd, format="mjd").iso[:10] for mjd in np.arange(start_dayobs_mjd, end_dayobs_mjd)]
    band_factors = cmap.transform.factors

    # If we have columns whose names are bands, we an use those directly as
    # the heights of our bars. If not, expect a DataFrame with a multi-indexed
    # column as returned by
    # schedview.compute.visits.accum_stats_by_target_band_night
    # and flatten it, making the t_eff columns the new columns with the
    # names of the bands (and so will get mapped to bar height below).
    have_band_columns = np.any(tuple(b in band_factors for b in nightly_totals.columns))
    if not have_band_columns:
        assert isinstance(nightly_totals.columns, pd.MultiIndex)
        nightly_totals = nightly_totals.copy()
        nightly_totals.columns = [
            c[1] if c[0] == "t_eff" else f"{c[1]}_{c[0]}" for c in nightly_totals.columns.to_flat_index()
        ]

    cadence_plots = []

    plot_kwargs = {
        "x_range": bokeh.models.FactorRange(factors=date_factors),
        "frame_height": 150,
        "frame_width": 1024,
        "title_location": "left",
    }
    plot_kwargs.update(user_plot_kwargs)

    for target in targets:
        last_plot = len(cadence_plots) == len(targets) - 1

        plot_kwargs["title"] = target
        plot_kwargs["x_axis_location"] = "below" if last_plot else None
        this_plot = bokeh.plotting.figure(**plot_kwargs)

        this_plot.xaxis.major_label_orientation = "vertical"

        kwargs = {"legend_label": band_factors} if last_plot else {}
        renderers = this_plot.vbar_stack(
            stackers=band_factors,
            x="day_obs_iso8601",
            width=0.9,
            source=nightly_totals.loc[target, :].reset_index(),
            color=cmap.transform.palette,
            fill_alpha=0.3,
            **kwargs,
        )

        for band, renderer in zip(band_factors, renderers):
            hover_tool = bokeh.models.HoverTool(
                tooltips=[
                    ("Day obs", "@day_obs_iso8601"),
                    ("Band", f"{band}"),
                    ("Start time", f"@{band}_start_timestamp" + "{%Y-%m-%d %H:%M:%S}"),
                    ("Num. visits", f"@{band}_count"),
                    ("Total exposure time", f"@{band}_visitExposureTime"),
                    ("Median single visit depth", f"@{band}_fiveSigmaDepth"),
                    ("Median sky brightness", f"@{band}_skyBrightness"),
                    ("Median sun alt", f"@{band}_sunAlt"),
                    ("Median moon alt", f"@{band}_moonAlt"),
                    ("Median moon phase", f"@{band}_moonPhase"),
                    ("Median moon distance", f"@{band}_moonDistance"),
                    ("Median airmass", f"@{band}_airmass"),
                    ("Median FWHM (eff)", f"@{band}_seeingFwhmEff"),
                    ("Median cloud", f"@{band}_cloud"),
                ],
                formatters={
                    f"@{band}_start_timestamp": "datetime",
                },
                renderers=[renderer],
            )
            this_plot.add_tools(hover_tool)

        if last_plot:
            moved_legend = this_plot.legend[0].clone()
            this_plot.legend[0].destroy()
            moved_legend.orientation = "horizontal"
            this_plot.add_layout(moved_legend, "below")

        cadence_plots.append(this_plot)

    full_cadence_figure = bokeh.layouts.column(cadence_plots)

    return full_cadence_figure
