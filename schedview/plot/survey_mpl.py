import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np

# Import ModelObservatory to make sphinx happy
from rubin_scheduler.scheduler.model_observatory import ModelObservatory  # noqa F401

from schedview.compute.camera import LsstCameraFootprintPerimeter

from .mplutils import (
    LAEA_SOUTH,
    PC,
    map_healpix,
    plot_ecliptic,
    plot_galactic_plane,
    plot_moon,
    plot_sun,
    sky_map,
)


def map_visits_over_healpix(visits, map_hpix, model_observatory, night_events, axes=None, **kwargs):
    """Plots visits over a healpix map, with astronomical annotations.

    Parameters
    ---------
    visits : `pd.DataFrame`
        A DataFrame of visits, with columns ``fieldRA`` and ``fieldDec``,
        with the coordinates (in degrees), ``observationStartMJD`` with the
        MJD of the start of each visit, and ``filter`` with the band
        (as a string).
    map_hpix : `numpy.ndarray`
        The healpixel array to show.
    model_observatory : `ModelObservatory`
        The model observatory.
    night_events : `pandas.DataFrame`
        A table of almanac events for the night, as generated by
        `schedview.compute.astro.night_events`.
    axes : `cartopy.mpl.geoaxes.GeoAxes`
        A matplotlib set of axes with a cartopy transform specifying the
        projection.
    **kwargs
        Additional keyword arguments are passed to
        `map_healpix`.

    Returns
    -------
    axes : `cartopy.mpl.geoaxes.GeoAxes`
        A matplotlib set of axes with a cartopy transform specifying the
        projection, map, visits, and astronomical annotations.
    """

    if axes is None:
        fig = plt.figure()
        axes = fig.add_subplot(1, 1, 1, projection=LAEA_SOUTH)

    map_healpix(axes, map_hpix, **kwargs)
    plot_ecliptic(axes, transform=PC, color="green")
    plot_galactic_plane(axes, transform=PC, color="blue")
    plot_sun(axes, model_observatory, night_events, transform=PC, color="yellow")
    plot_moon(axes, model_observatory, night_events, transform=PC, color="orange")

    camera_perimeter = LsstCameraFootprintPerimeter()
    ras, decls = camera_perimeter(visits.fieldRA, visits.fieldDec, visits.rotSkyPos)

    # Keep matplotlib & cartopy from going the wrong way around.
    for these_ras in ras:
        if these_ras.max() - these_ras.min() > 180:
            low_ras = these_ras < 180
            these_ras[low_ras] = these_ras[low_ras] + 360

    vertices = [np.stack(c).T for c in zip(ras, decls)]
    pointing_collection = mpl.collections.PolyCollection(vertices)
    pointing_collection.set(transform=PC, edgecolor="black", linewidth=1, facecolor="None")

    axes.add_collection(pointing_collection)
    sky_map(axes)
    return axes


def create_hpix_visit_map_grid(
    visits, hpix_maps, model_observatory, night_events, fig=None, num_rows=2, **kwargs
):
    """Plot an array of visits over a healpix maps, with astronomical
    annotations.

    Parameters
    ---------
    visits : `pd.DataFrame`
        A DataFrame of visits, with columns ``fieldRA`` and ``fieldDec``,
        with the coordinates (in degrees), ``observationStartMJD`` with the
        MJD of the start of each visit, and ``filter`` with the band
        (as a string).
    hpix_maps : `dict` [`str`, `numpy.ndarray`]
        The healpixel array to show.
    model_observatory : `ModelObservatory`
        The model observatory.
    night_events : `pandas.DataFrame`
        A table of almanac events for the night, as generated by
        `schedview.compute.astro.night_events`.
    fig : `matplotlib.figure.Figure` or `None`
        A matplotlib figure in which to plot the array of maps.
        If None, a new figure is created.
        Defaults to None.
    nrows : `int`
        The number of rows in the array of plots.
        Defaults to 2.
    **kwargs
        Additional keyword arguments are passed to
        `map_healpix`.

    Returns
    -------
    fig : `matplotlib.figure.Figure`
        The matplotlib figure with the array of maps.
    """

    # Python's "//" operator rounds down, but we want to round up, so
    # apply it to the negative, then negate the result.
    num_columns = -(-len(hpix_maps) // num_rows)

    if fig is None:
        plot_height = 5 * num_rows
        plot_width = 5.1 * num_columns
        fig = plt.figure(figsize=(plot_width, plot_height))

    for band_idx, band in enumerate(hpix_maps.keys()):
        visits_in_band = visits.query(f"filter == '{band}'")
        axes = fig.add_subplot(num_rows, num_columns, band_idx + 1, projection=LAEA_SOUTH)
        axes.set_title(band, loc="left")
        map_visits_over_healpix(
            visits_in_band, hpix_maps[band], model_observatory, night_events, axes=axes, **kwargs
        )

    return fig
