from datetime import datetime
from zoneinfo import ZoneInfo

import panel as pn
import param
from astropy.time import Time
from pandas import Timestamp

from schedview.app.scheduler_dashboard.constants import DEFAULT_TIMEZONE
from schedview.app.scheduler_dashboard.unrestricted_scheduler_snapshot_dashboard import (
    SchedulerSnapshotDashboard,
)
from schedview.app.scheduler_dashboard.utils import query_night_schedulers


class LFASchedulerSnapshotDashboard(SchedulerSnapshotDashboard):
    """A Parametrized container for parameters, data, and panel objects for the
    scheduler dashboard working in LFA mode where data files are loaded from
    a certain S3 bucket.
    """

    scheduler_fname_doc = """Recent pickles from LFA
    """

    # Precedence is used to make sure fields are displayed
    # in the right order regardless of the dashboard mode.
    scheduler_fname = param.Selector(
        default="",
        objects=[],
        doc=scheduler_fname_doc,
        precedence=3,
    )

    pickles_date = param.Date(
        default=datetime.now(),
        label="Snapshot selection cutoff date and time",
        doc="Show snapshots that are recent as of this date and time in the scheduler snapshot file dropdown",
        precedence=1,
    )

    telescope = param.Selector(
        default=None, objects={"All": None, "Simonyi": 1, "Auxtel": 2}, doc="Source Telescope", precedence=2
    )

    # Summary widget and Reward widget heights are different in this mode
    # because there are more data loading parameters.
    _summary_widget_height = 310
    _reward_widget_height = 350

    data_loading_parameters = [
        "scheduler_fname",
        "pickles_date",
        "telescope",
        "widget_datetime",
        "widget_tier",
    ]
    # Set specific widget props for data loading parameters
    # in LFA mode.
    data_loading_widgets = {
        "pickles_date": pn.widgets.DatetimePicker,
        "widget_datetime": pn.widgets.DatetimePicker,
    }
    # Set the data loading parameter section height in LFA mode.
    data_params_grid_height = 42

    def __init__(self):
        super().__init__()

    async def query_schedulers(self, selected_time, selected_tel):
        """Query snapshots that have a timestamp between the start of the
        night and selected datetime and generated by selected telescope
        """
        selected_time = Time(
            Timestamp(
                selected_time,
                tzinfo=ZoneInfo(DEFAULT_TIMEZONE),
            )
        )
        self.show_loading_indicator = True
        self._debugging_message = "Starting retrieving snapshots"
        self.logger.debug("Starting retrieving snapshots")
        scheduler_urls = await query_night_schedulers(selected_time, selected_tel)
        self.logger.debug("Finished retrieving snapshots")
        self._debugging_message = "Finished retrieving snapshots"
        self.show_loading_indicator = False
        return scheduler_urls
